jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      maxParallel: 2
    variables:
      repoDir: '$(Build.Repository.LocalPath)'

    steps:
      - task: CondaEnvironment@1
        inputs:
          updateConda: false
      - script: |
          chmod +x .ci/test_project.sh 
          ./.ci/test_project.sh $(repoDir) source

  - job: macOS
    pool:
      vmImage: 'xcode9-macos10.13'
    strategy:
      maxParallel: 2
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to PATH

      - script: |
          chmod +x .ci/test_project.sh || exit 1
          ./.ci/test_project.sh $(repoDir) source || exit 1

  - job:
    displayName: Windows
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      maxParallel: 2
      # matrix:
      #   py36:
      #     PY_VERSION: 3.6
      #     VS_VERSION: 2015
      #   # py27:
      #   #   PY_VERSION: 2.7
    variables:
      repoDir: '$(Build.Repository.LocalPath)'
    steps:
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH

    - script: conda create --yes --quiet --name myroot || exit 1
      displayName: Create Anaconda environment

    - script: |
        call activate myroot || exit 1
        conda install --yes --quiet --name myroot cookiecutter -c conda-forge || exit 1
      displayName: Install Anaconda packages
      
    - script: |
        echo "activate" || exit 1
        call activate myroot || exit 1
        echo "cd" || exit 1
        cd .. || exit 1
        echo "run cookiecutter" || exit 1
        cookiecutter %repoDir% --overwrite-if-exists --no-input || exit 1
      displayName: generating project from cookiecutter

    - script: |
        echo "activate" || exit 1
        call activate myroot || exit 1
        echo "cd path" || exit 1
        cd .. || exit 1
        cd pytools || exit 1
        echo "create" || exit 1
        conda env create   -f pytools-dev-requirements.yml || exit 1
        echo "done" || exit 1
      displayName: create dev requirements env

    - script: |
        echo "cd path"  || exit 1
        cd ..\pytools || exit 1
        echo "activate" || exit 1
        call activate pytools-dev-requirements || exit 1
        python -m pytest || exit 1
      displayName: run python tests



schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
      - master
    always: true

